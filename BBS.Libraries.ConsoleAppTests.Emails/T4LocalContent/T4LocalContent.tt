<#@ template language="C#v3.5" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#		Initialize(); #>
// <auto-generated />
// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;


<#
		if(!string.IsNullOrWhiteSpace(LinksNamespace))
		{
#>

<#
		}

		if(!string.IsNullOrWhiteSpace(FilesNamespace))
		{
#>

#region <#=						FilesNamespace #><#=						(string.IsNullOrWhiteSpace(FilesSubClassName) ? string.Empty : string.Format(".{0}", FilesSubClassName)) #>
namespace <#=						FilesNamespace #>
{
<#
				foreach(var subClassName in FilesSubClassNames)
				{
						PushIndent("\t");
#>
[<#=								GeneratedCode #>, DebuggerNonUserCode]
public static partial class <#=								subClassName #>
{
<#
				}

				string folderName = "~/";
				if(!string.IsNullOrWhiteSpace(RepositoryPathPrefix))
				{
						folderName = string.Format("{0}{1}/", folderName, RepositoryPathPrefix);
				}

				foreach(ProjectItem folderItem in Project.ProjectItems)
				{
						if(IsFolder(folderItem))
						{
								if(string.Equals(ViewsFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase) || LocalContentFileFolders.Any(name => string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
								{
										Files_ProcessContentFolder(folderItem, folderName);
								}
								if(string.Equals(AreasRootFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase))
								{
										PushIndent("\t");
#>
[<#=												GeneratedCode #>, DebuggerNonUserCode]
public static partial class Areas
{
<#
										foreach(ProjectItem areaItem in folderItem.ProjectItems)
										{
												if(IsFolder(areaItem))
												{
														Files_ProcessArea(areaItem, string.Format("{0}Areas/", folderName));
												}
										}
#>
}
<#
										PopIndent();
								}
						}
				}

				foreach(var subClassName in FilesSubClassNames)
				{
#>
<#
        if(!string.IsNullOrWhiteSpace(RepositoryPathPrefix))
				{
#>
  public static string RepositryNamespace = "<#= RepositoryPathPrefix #>";
<#
				}
#>
  
}
<#
						PopIndent();
				}
#>
}
#endregion

<#
		}

		if(!string.IsNullOrWhiteSpace(LinksNamespace))
		{
#>
#region <#=						LinksNamespace #><#=	(string.IsNullOrWhiteSpace(LinksSubClassName) ? string.Empty : string.Format(".{0}", LinksSubClassName)) #>
namespace <#=						LinksNamespace #>
{
<#
				foreach(var subClassName in LinksSubClassNames)
				{
						PushIndent("\t");
#>
[<#=								GeneratedCode #>, DebuggerNonUserCode]
public static partial class <#=								subClassName #>
{
<#
				}

				string folderName = "~/";
				if(!string.IsNullOrWhiteSpace(RepositoryPathPrefix))
				{
						folderName = string.Format("{0}{1}/", folderName, RepositoryPathPrefix);
				}

				foreach(ProjectItem projectItem in Project.ProjectItems)
				{
						if(string.Equals(projectItem.Name, "favicon.ico", StringComparison.InvariantCultureIgnoreCase))
						{
#>
	private static readonly string _root = "<#=				folderName #>";
	public static string Url() { return T4LocalContentHelper.GetUrl(_root); }
	public static string Url(string fileName) { return T4LocalContentHelper.GetUrl(fileName) + "?" + T4LocalContentHelper.TimestampString(fileName); }
	public static readonly string <#=								EscapeID(Sanitize(projectItem.Name)) #> = Url("<#=								string.Format("{0}{1}", folderName, projectItem.Name) #>");

<#
						}
				}

				foreach(ProjectItem folderItem in Project.ProjectItems)
				{
						if(IsFolder(folderItem))
						{
								if(string.Equals(AreasRootFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase))
								{
										PushIndent("\t");
#>
[<#=												GeneratedCode #>, DebuggerNonUserCode]
public static partial class Areas
{
<#
										foreach(ProjectItem areaItem in folderItem.ProjectItems)
										{
												if(IsFolder(areaItem))
												{
														Links_ProcessArea(areaItem, string.Format("{0}Areas/", folderName));
												}
										}
#>
}
<#
										PopIndent();
								}
								if(LocalContentFileFolders.Any(name => string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
								{
										Links_ProcessContentFolder(folderItem, folderName);
								}
						}
				}

				foreach(var subClassName in LinksSubClassNames)
				{
#>
}
<#
						PopIndent();
				}
#>
}
#endregion
<#
		}
#>

<#@ Include File="T4LocalContent.settings.t4" #>
<#+ 
		void Files_ProcessArea(ProjectItem projectItem, string folderName)
		{
				folderName = string.Format("{0}{1}/", folderName, projectItem.Name);
				PushIndent("\t");
#>
[<#=				GeneratedCode #>, DebuggerNonUserCode]
public static partial class <#=				EscapeID(Sanitize(projectItem.Name)) #>
{
<#+
				foreach(ProjectItem folderItem in projectItem.ProjectItems)
				{
						if(IsFolder(folderItem))
						{
								if(string.Equals(ViewsFolder, folderItem.Name, StringComparison.InvariantCultureIgnoreCase) || LocalContentFileFolders.Any(name => string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
								{
										Files_ProcessContentFolder(folderItem, folderName);
								}
						}
				}
#>
}
<#+
				PopIndent();
		}

		void Files_ProcessContentFolder(ProjectItem projectFolder, string folderName)
		{
				folderName = string.Format("{0}{1}/", folderName, projectFolder.Name);
				PushIndent("\t");
#>
[<#=				GeneratedCode #>, DebuggerNonUserCode]
public static partial class <#=				EscapeID(Sanitize(projectFolder.Name)) #>
{
	public static readonly string _root = "<#=				folderName #>";
<#+
				foreach(ProjectItem projectItem in projectFolder.ProjectItems)
				{
						if(IsFolder(projectItem))
						{
								Files_ProcessContentFolder(projectItem, folderName);
						}
						else if(!LocalContentFileIgnoreFileExtensions.Any(e => projectItem.Name.EndsWith(e, StringComparison.InvariantCultureIgnoreCase)))
						{
								foreach(string fileName in ExpandFileName(projectItem.Name))
								{
#>
	public static readonly string <#=										EscapeID(Sanitize(fileName)) #> = "<#=										string.Format("{0}{1}", folderName, projectItem.Name) #>";
<#+
								}
						}
				}
#>
}
<#+
				PopIndent();
		}

		void Links_ProcessArea(ProjectItem projectItem, string folderName)
		{
				folderName = string.Format("{0}{1}/", folderName, projectItem.Name);
				PushIndent("\t");
#>
[<#=				GeneratedCode #>, DebuggerNonUserCode]
public static partial class <#=				EscapeID(Sanitize(projectItem.Name)) #>
{
<#+
				foreach(ProjectItem folderItem in projectItem.ProjectItems)
				{
						if(IsFolder(folderItem))
						{
								if(LocalContentFileFolders.Any(name => string.Equals(name, folderItem.Name, StringComparison.InvariantCultureIgnoreCase)))
								{
										Links_ProcessContentFolder(folderItem, folderName);
								}
						}
				}
#>
}
<#+
				PopIndent();
		}

		void Links_ProcessContentFolder(ProjectItem projectFolder, string folderName)
		{
				folderName = string.Format("{0}{1}/", folderName, projectFolder.Name);
				PushIndent("\t");
#>
[<#=				GeneratedCode #>, DebuggerNonUserCode]
public static partial class <#=				EscapeID(Sanitize(projectFolder.Name)) #>
{
	private static readonly string _root = "<#=				folderName #>";
	public static string Url() { return T4LocalContentHelper.GetUrl(_root); }
	public static string Url(string fileName) { return T4LocalContentHelper.GetUrl(fileName) + "?" + T4LocalContentHelper.TimestampString(fileName); }
<#+
				foreach(ProjectItem projectItem in projectFolder.ProjectItems)
				{
						if(IsFolder(projectItem))
						{
								Links_ProcessContentFolder(projectItem, folderName);
						}
						else if(!LocalContentFileIgnoreFileExtensions.Any(e => projectItem.Name.EndsWith(e, StringComparison.InvariantCultureIgnoreCase)))
						{
								foreach(string fileName in ExpandFileName(projectItem.Name))
								{
#>
	public static readonly string <#=										EscapeID(Sanitize(fileName)) #> = Url("<#=										string.Format("{0}{1}", folderName, projectItem.Name) #>");
<#+
								}
						}
				}
#>
}
<#+
				PopIndent();
		}

		static DTE Dte;
		static Project Project;
		static Microsoft.CSharp.CSharpCodeProvider codeProvider;
		static string GeneratedCode;
		static string[] FilesSubClassNames;
		static string[] LinksSubClassNames;
		static Dictionary<System.Text.RegularExpressions.Regex, string> rgFileNameReplacements;

		void Initialize()
		{
				var serviceProvider = Host as IServiceProvider;
				if (serviceProvider != null) 
				{
						Dte = serviceProvider.GetService(typeof(SDTE)) as DTE;
				}

				Project = Dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;

				codeProvider = new Microsoft.CSharp.CSharpCodeProvider();
				GeneratedCode = @"GeneratedCode(""T4LocalContent"", ""1.0"")";

				FilesSubClassNames = FilesSubClassName.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries);
				LinksSubClassNames = LinksSubClassName.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries);
		}

		static List<string> ExpandFileName(string fileName)
		{
				var result = new List<string>();

				result.Add(fileName);
				if(LocalContentFileNameReplacements != null)
				{
						foreach(var fileNameReplacement in LocalContentFileNameReplacements)
						{
								if(fileNameReplacement.Key.Match(fileName).Success)
								{
										result.Add(fileNameReplacement.Value);
								}
						}
				}

				return result;
		}

		static bool IsFolder(ProjectItem item) 
		{
				return (item.Kind == Constants.vsProjectItemKindPhysicalFolder);
		}

		static string MakeClassName(string ns, string classname) 
		{
				return string.IsNullOrWhiteSpace(ns) ? classname : string.IsNullOrWhiteSpace(classname) ? ns : ns + "." + codeProvider.CreateEscapedIdentifier(classname);
		}

		static string Sanitize(string token) 
		{
				// Replace all invalid chars by underscores
				token = Regex.Replace(token, @"[\W\b]", "_", RegexOptions.IgnoreCase);

				// If it starts with a digit, prefix it with an underscore
				token = Regex.Replace(token, @"^\d", @"_$0");

				// Check for reserved words
				// TODO: Clean this up and add other reserved words (keywords, etc)
				if (token == "Url") token = "_Url";

				return token;
		}

		static string EscapeID(string id) 
		{
				return codeProvider.CreateEscapedIdentifier(id);
		}

	#>